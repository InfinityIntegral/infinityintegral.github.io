#c SGXFile
class allowing reading from and writing to files
#ic SGEXTN/filesystem/sgxfile.h
#d SGXFile is used to read data from and write data to binary files. Note that SGXFile can only read data previously written using SGXFile or another SGEXTN file access class. Binary files can be used to store user data and settings in your application. You are strongly encouraged to use the extension .sg for configuration files, so that your app is literally "powered by Singapore".$SGXFile, similar to the rest of SGEXTN, does not maintain backward compatible APIs. However, the contents written by an earlier version of SGXFile is guaranteed to be readable by a later version, unless otherwise specified.
#p bool $isValid
This property indicates if this SGXFile has been set up successfully. If it is true, you can use the SGXFile normally. If it is false, the SGXFile failed to set up correctly because there is no file at the path.
#f $SGXFile(const QString& s)
This constructor of SGXFile creates a SGXFile linked to the file at path s, which can be used to access the file that exists at path s. No error checking is done, so you must ensure that the file exists and is in your app's folder before attempting to write to it. Technically in Qt you can write to a nonexistent file (Qt creates it for you), but in SGEXTN you should explicitly create the file first before writing to it.
#f [[nodiscard]] bool $readBool() const
This function reads a boolean from the current location of the file pointer and returns it. This moves the file pointer forwards.
#f [[nodiscard]] char $readChar() const
This function reads a C++ char from the current location of the file pointer and returns it. This moves the file pointer forwards.
#f [[nodiscard]] QChar $readQChar() const
This function reads a QChar from the current location of the file pointer and returns it. This moves the file pointer forwards.
#f [[nodiscard]] int $readInt() const
This function reads an integer from the current location of the file pointer and returns it. This moves the file pointer forwards.
#f [[nodiscard]] unsigned int $readUnsignedInt() const
This function reads an unsigned integer from the current location of the file pointer and returns it. This moves the file pointer forwards.
#f [[nodiscard]] long long $readLongLong() const
This function reads a long long from the current location of the file pointer and returns it. This moves the file pointer forwards.
#f [[nodiscard]] unsigned long long $readUnsignedLongLong() const
This function reads an unsigned long long from the current location of the file pointer and returns it. This moves the file pointer forwards.
#f [[nodiscard]] float $readFloat() const
This function reads a floating point number from the current location of the file pointer and returns it. This moves the file pointer forwards.
#f [[nodiscard]] double $readDouble() const
This function reads a double precision floating point number from the current location of the file pointer and returns it. This moves the file pointer forwards.
#f [[nodiscard]] std::string $readCppString() const
This function reads a C++ string from the current location of the file pointer and returns it. This moves the file pointer forwards.
#f [[nodiscard]] QString $readString() const
This function reads a QString from the current location of the file pointer and returns it. This moves the file pointer forwards.
#f [[nodiscard]] SGXColourRGBA $readColourRGBA() const
This function reads a <a class="link" href="/classinfo/sgxcolourrgba">SGXColourRGBA</a> representing a 8 bit RGBA colour from the current location of the file pointer and returns it. This moves the file pointer forwards.
#f [[nodiscard]] SGXColourHSLA $readColourHSLA() const
This function reads a <a class="link" href="/classinfo/sgxcolourhsla">SGXColourHSLA</a> representing a colour in HSLA format from the current location of the file pointer and returns it. This moves the file pointer forwards.
#f [[nodiscard]] SGXTimeStamp $readTimeStamp() const
This function reads a <a class="link" href="/classinfo/sgxtimestamp">SGXTimeStamp</a> representing a time accurate to the nearest second from the current location of the file pointer and returns it. This moves the file pointer forwards.
#f [[nodiscard]] SGXIdentifier $readIdentifier() const
This function reads a <a class="link" href="/classinfo/sgxidentifier">SGXIdentifier</a> representing a global unique identifier (GUID) from the current location of the file pointer and returns it. This moves the file pointer forwards.
#f [[nodiscard]] SGXVector2 $readVector2() const
This function reads a <a class="link" href="/classinfo/sgxvector2">SGXVector2</a> representing a 2 dimensional vector from the current location of the file pointer and returns it. This moves the file pointer forwards.
#f void $writeBool(bool x) const
This function writes a boolean to the current location of the file pointer. This moves the file pointer forwards.
#f void $writeChar(char x) const
This function writes a C++ char to the current location of the file pointer. This moves the file pointer forwards.
#f void $writeQChar(QChar x) const
This function writes a QChar to the current location of the file pointer. This moves the file pointer forwards.
#f void $writeInt(int x) const
This function writes an integer to the current location of the file pointer. This moves the file pointer forwards.
#f void $writeUnsignedInt(unsigned int x) const
This function writes an unsigned integer to the current location of the file pointer. This moves the file pointer forwards.
#f void $writeLongLong(long long x) const
This function writes a long long to the current location of the file pointer. This moves the file pointer forwards.
#f void $writeUnsignedLongLong(unsigned long long x) const
This function writes an unsigned long long to the current location of the file pointer. This moves the file pointer forwards.
#f void $writeFloat(float x) const
This function writes a floating point number to the current location of the file pointer. This moves the file pointer forwards.
#f void $writeDouble(double x) const
This function writes a double precision floating point number to the current location of the file pointer. This moves the file pointer forwards.
#f void $writeCppString(const std::string& x) const
This function writes a C++ string to the current location of the file pointer. This moves the file pointer forwards.
#f void $writeString(const QString& x) const
This function writes a QString to the current location of the file pointer. This moves the file pointer forwards.
#f void $writeColourRGBA(SGXColourRGBA x) const
This function writes a <a class="link" href="/classinfo/sgxcolourrgba">SGXColourRGBA</a> representing a 8 bit RGBA colour to the current location of the file pointer. This moves the file pointer forwards.
#f void $writeColourHSLA(SGXColourHSLA x) const
This function writes a <a class="link" href="/classinfo/sgxcolourhsla">SGXColourHSLA</a> representing a colour in HSLA format to the current location of the file pointer. This moves the file pointer forwards.
#f void $writeTimeStamp(SGXTimeStamp x) const
This function writes a <a class="link" href="/classinfo/sgxtimestamp">SGXTimeStamp</a> representing a time accurate to the nearest second to the current location of the file pointer. This moves the file pointer forwards.
#f void $writeIdentifier(SGXIdentifier x) const
This function writes a <a class="link" href="/classinfo/sgxidentifier">SGXIdentifier</a> representing a global unique identifier (GUID) to the current location of the file pointer. This moves the file pointer forwards.
#f void $writeVector2(SGXVector2 x) const
This function writes a <a class="link" href="/classinfo/sgxvector2">SGXVector2</a> representing a 2 dimensional vector to the current location of the file pointer. This moves the file pointer forwards.
#f [[nodiscard]] long long $getPointerLocation() const
This function gets the current location of the file pointer as a number of bytes from the start of the file.
#f void $setPointerLocation(long long x) const
This function sets the current location of the file pointer as a number of bytes from the start of the file. When you write past the end of the file, the space in between is filled with 0 to prevent file fragmentation. This costs a bit of performance but is justified if you plan to fill in that hole later. You should not leave holes in files intentionally unless reserving space for data blocks.
#f [[nodiscard]] QByteArray $readAllBytes() const
This function reads all the data contained in the file and returns it in the form of a QByteArray. This ignores the current location of the file pointer.
#f [[nodiscard]] QByteArray $readBytes(long long n) const
This function reads n bytes from the current location of the file pointer and returns it in the form of a QByteArray. This moves the file pointer forwards.
#f void $writeBytes(const QByteArray& x) const
This function writes raw byte data in the form of a QByteArray to the current location of the file pointer. This moves the file pointer forwards.
