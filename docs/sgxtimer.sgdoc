#c SGXTimer
timer for delayed function execution
#ic SGEXTN/timer/sgxtimer.h
#d SGXTimer is designed to replace QTimer and provides a timer that allows functions to be run after a certain amount of time. The timer accepts only functions that return void and take no arguments in the form of function pointers. The unit of time used by the timer is seconds but it is accurate to the nearest millisecond. To run the function repeatedly at fixed intervals, create a SGXTimer object. However, use SGXTimer::singleCall(float, void (*)()) if you only need the function to run once. You can stop and restart timers, and deleting a timer automatically stops it.
#f $SGXTimer(float t, void (*attachedFunction)())
This constructor for SGXTimer creates a timer that runs attachedFunction repeatedly every t seconds, accurate to the nearest millisecond. It does not run attachedFunction immediately upon creation and the first execution comes only t seconds later. The function attachedFunction should be passed as a function pointer, and it should return void and take no arguments.
#f void $stop() const
This function stops the SGXTimer that is currently running. If you do not intend to restart it later, delete the SGXTimer instead to stop it permanently.
#f void $start() const
This function restarts the SGXTimer that has previously been stopped.
#sf void $singleCall(float t, void (*attachedFunction)())
This function runs attachedFunction t seconds later, accurate to the nearest millisecond. You cannot stop attachedFunction from being run or pause the timer once this function has been called. The function attachedFunction should be passed as a function pointer, and it should return void and take no arguments.
