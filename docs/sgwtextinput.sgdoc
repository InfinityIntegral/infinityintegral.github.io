#c SGWTextInput
SGWidget interactive input field allowing single line text input
#ic SGEXTN/widgets/instantiable/sgwtextinput.h
#if SGWInput
#d SGWTextInput is a subclass of SGWInput that allows the user to enter single line text into the input field. SingCorrect is enabled on the input field. Since SGWTextInput must intercept user input to receive input and trigger callback functions, it blocks user input from reaching SGWidgets under it. The constructor of SGWTextInput does not support directly setting the text in the input field. To do so, use SGWInput::setTextFromString(const QString&) instead.
#dt <div id="-w"></div>_w Distance
The position and size of all SGWidgets are calculated using a <a class="link" href="#-w">_w</a> distance.$A _w distance is made of 2 coordinates, coordinate 1 and coordinate 0, and it is denoted using _w(c1, c0). This is equal to c1 * parent_size + c0 * size_unit pixels, where parent_size is the size of the parent SGWidget and size_unit is 1/24 of the screen width or screen height, whichever is longer.
#dt <div id="-c"></div> Theme Colours
SGWidgets follow a set of 9 chosen <a class="link" href="#-c">theme colours</a>. Each of these 9 colours have a index number between 0 and 8 which can be used to refer to them. If you want a SGWidget to have a colour that is not a theme colour, you must set it using a <a class="link" href="./classinfo.html?classname=sgxcolourrgba">SGXColourRGBA</a>. Setting a non theme colour switches the widget to non theme colour mode and ignores previously set theme colours. Setting a theme colour switches the widget to theme colour mode and ignores all previously set non theme colours.
#f $SGWTextInput(SGWWidget* parent, void (*validationFunction)(SGWInput*), float x1, float x0, float y1, float y0, float w1, float w0, float h1, float h0)
This constructor for SGWTextInput creates a SGWTextInput and places it onto the screen.$parent: pointer to parent SGWidget$attachedFunction: callback function activated when the user finishes entering text into the input field and unfocuses it, a callback function attached to an input field must return void and take as argument a pointer to a SGWInput, which indicates the input field that triggered the callback function$x1: 1 coordinate of x coordinate (which is a <a class="link" href="#-w">_w</a> distance) of position$x0: 0 coordinate of x coordinate (which is a <a class="link" href="#-w">_w</a> distance) of position$y1: 1 coordinate of y coordinate (which is a <a class="link" href="#-w">_w</a> distance) of position$y0: 0 coordinate of y coordinate (which is a <a class="link" href="#-w">_w</a> distance) of position$w1: 1 coordinate of width (which is a <a class="link" href="#-w">_w</a> distance)$w0: 0 coordinate of width (which is a <a class="link" href="#-w">_w</a> distance)$h1: 1 coordinate of height (which is a <a class="link" href="#-w">_w</a> distance)$h0: 0 coordinate of height (which is a <a class="link" href="#-w">_w</a> distance)
