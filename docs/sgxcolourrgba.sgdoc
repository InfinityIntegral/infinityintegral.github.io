#c SGXColourRGBA
struct storing 8 bit RGBA colour
#ic SGEXTN/primitives/sgxcolourrgba.h
#d The SGXColourRGBA class stores a RGBA colour with 8 bits of precision for each channel. This means that each channel can have a value of between 0 and 255. SGXColourRGBA replaces QColor in SGEXTN APIs. SGXColourRGBA contains functions to mix, gamma correct, and do other computations related to colours.
#f $SGXColourRGBA()
This is the default constructor for SGXColourRGBA. You are not supposed to normally use it and it does nothing anyways. The only reason why it exists is so that people can use = {} to initialise SGXColourRGBA variables in class definition header files. That is not really needed, but doing it stops clang-tidy from complaining.
#f $SGXColourRGBA(int r, int g, int b, int a)
This constructor creates a SGXColourRGBA from 4 integers, 1 each for red (r), green (g), blue (b), and transparency (a). Each integer including transparency (a) must be between 0 and 255 inclusive. If any integer is outside that range, it is bound to the correct range automatically. It is not possible for SGXColourRGBA to represent any invalid colour.
#f $SGXColourRGBA(int r, int g, int b)
This constructor creates a SGXColourRGBA from 3 integers, 1 each for red (r), green (g), and blue (b). Each integer must be between 0 and 255 inclusive. If any integer is outside that range, it is bound to the correct range automatically. It is not possible for SGXColourRGBA to represent any invalid colour. When using this constructor, the transparency is set to maximum (fully opaque) automatically.
#f $SGXColourRGBA(float r, float g, float b, float a)
This constructor creates a SGXColourRGBA from 4 floats, 1 each for red (r), green (g), blue (b), and transparency (a). Each number including transparency (a) must be between 0 and 1 inclusive. If any number is outside that range, it is bound to the correct range automatically. It is not possible for SGXColourRGBA to represent any invalid colour.
#f $SGXColourRGBA(float r, float g, float b)
This constructor creates a SGXColourRGBA from 3 floats, 1 each for red (r), green (g), and blue (b). Each number must be between 0 and 1 inclusive. If any number is outside that range, it is bound to the correct range automatically. It is not possible for SGXColourRGBA to represent any invalid colour.
#f $SGXColourRGBA(QColor x)
This constructor converts a QColor to a SGXColourRGBA. This is useful for interfacing with Qt APIs.
#f [[nodiscard]] int $getRed() const
This function retrieves the red value stored in a SGXColourRGBA in the form of an integer between 0 and 255 inclusive.
#f [[nodiscard]] int $getGreen() const
This function retrieves the green value stored in a SGXColourRGBA in the form of an integer between 0 and 255 inclusive.
#f [[nodiscard]] int $getBlue() const
This function retrieves the blue value stored in a SGXColourRGBA in the form of an integer between 0 and 255 inclusive.
#f [[nodiscard]] int $getTransparency() const
This function retrieves the transparency value stored in a SGXColourRGBA in the form of an integer between 0 and 255 inclusive.
#f [[nodiscard]] QColor $getQColour() const
This function converts a SGXColourRGBA to a QColor. This is useful for interfacing with Qt APIs.
#f [[nodiscard]] float $getRedAsFloat() const
This function retrieves the red value stored in a SGXColourRGBA in the form of a number between 0 and 1 inclusive.
#f [[nodiscard]] float $getGreenAsFloat() const
This function retrieves the green value stored in a SGXColourRGBA in the form of a number between 0 and 1 inclusive.
#f [[nodiscard]] float $getBlueAsFloat() const
This function retrieves the blue value stored in a SGXColourRGBA in the form of a number between 0 and 1 inclusive.
#f [[nodiscard]] float $getTransparencyAsFloat() const
This function retrieves the transparency value stored in a SGXColourRGBA in the form of a number between 0 and 1 inclusive.
#f void $setRed(int r)
This function sets the red value stored in a SGXColourRGBA. The input must be an integer between 0 and 255 inclusive. If the input is outside that range, it will be bound to the correct range automatically. It is not possible for a SGXColourRGBA to store any invalid colour.
#f void $setGreen(int g)
This function sets the green value stored in a SGXColourRGBA. The input must be an integer between 0 and 255 inclusive. If the input is outside that range, it will be bound to the correct range automatically. It is not possible for a SGXColourRGBA to store any invalid colour.
#f void $setBlue(int b)
This function sets the blue value stored in a SGXColourRGBA. The input must be an integer between 0 and 255 inclusive. If the input is outside that range, it will be bound to the correct range automatically. It is not possible for a SGXColourRGBA to store any invalid colour.
#f void $setTransparency(int a)
This function sets the transparency value stored in a SGXColourRGBA. The input must be an integer between 0 and 255 inclusive. If the input is outside that range, it will be bound to the correct range automatically. It is not possible for a SGXColourRGBA to store any invalid colour.
#f void $setRedUsingFloat(float r)
This function sets the red value stored in a SGXColourRGBA. The input must be a number between 0 and 1 inclusive. If the input is outside that range, it will be bound to the correct range automatically. It is not possible for a SGXColourRGBA to store any invalid colour.
#f void $setGreenUsingFloat(float g)
This function sets the green value stored in a SGXColourRGBA. The input must be a number between 0 and 1 inclusive. If the input is outside that range, it will be bound to the correct range automatically. It is not possible for a SGXColourRGBA to store any invalid colour.
#f void $setBlueUsingFloat(float b)
This function sets the blue value stored in a SGXColourRGBA. The input must be a number between 0 and 1 inclusive. If the input is outside that range, it will be bound to the correct range automatically. It is not possible for a SGXColourRGBA to store any invalid colour.
#f void $setTransparencyUsingFloat(float a)
This function sets the transparency value stored in a SGXColourRGBA. The input must be a number between 0 and 1 inclusive. If the input is outside that range, it will be bound to the correct range automatically. It is not possible for a SGXColourRGBA to store any invalid colour.
#f [[nodiscard]] QString $getStringForPrintingRGBHTML() const
This function generates a string representation of the SGXColourRGBA in HTML format. Only RGB channels are included and the value stored in each channel is represented by an integer between 0 and 255. An example of this is rgb(255, 0, 200).
#f [[nodiscard]] QString $getStringForPrintingRGBAHTML() const
This function generates a string representation of the SGXColourRGBA in HTML format. All channels are included and the value stored in each channel is represented by an integer between 0 and 255. An example of this is rgba(255, 0, 200, 255).
#f [[nodiscard]] QString $getStringForPrintingRGBHex() const
This function generates a string representation of the SGXColourRGBA in hex code format with the # prefixed. Only RGB channels are included. An example of this is #FF00C8.
#f [[nodiscard]] QString $getStringForPrintingRGBAHex() const
This function generates a string representation of the SGXColourRGBA in hex code format with the # prefixed. All channels are included. The transparency channel causes the hex code to have 8 digits instead of 6, with the last 2 digits being transparency. An example of this is #FF00C8FF.
#f [[nodiscard]] QString $getStringForPrintingRGBFloatHTML() const
This function generates a string representation of the SGXColourRGBA in HTML format. Only RGB channels are included and the value stored in each channel is represented by a number between 0 and 1. An example of this is rgb(1, 0, 0.75).
#f [[nodiscard]] QString $getStringForPrintingRGBAFloatHTML() const
This function generates a string representation of the SGXColourRGBA in HTML format. All channels are included and the value stored in each channel is represented by a number between 0 and 1. An example of this is rgba(1, 0, 0.75, 1).
#f void $linearTransformRed(float m, float c)
This function replaces the current red value stored in the SGXColourRGBA, which we will refer to as x, with mx + c. This edits the SGXColourRGBA in place. To get a copy of the old SGXColourRGBA, copy it to another variable first.
#f void $linearTransformGreen(float m, float c)
This function replaces the current green value stored in the SGXColourRGBA, which we will refer to as x, with mx + c. This edits the SGXColourRGBA in place. To get a copy of the old SGXColourRGBA, copy it to another variable first.
#f void $linearTransformBlue(float m, float c)
This function replaces the current blue value stored in the SGXColourRGBA, which we will refer to as x, with mx + c. This edits the SGXColourRGBA in place. To get a copy of the old SGXColourRGBA, copy it to another variable first.
#f void $linearTransformTransparency(float m, float c)
This function replaces the current transparency value stored in the SGXColourRGBA, which we will refer to as x, with mx + c. This edits the SGXColourRGBA in place. To get a copy of the old SGXColourRGBA, copy it to another variable first. Note that there is no gamma corrected version of this function because transparency is already linear.
#f void $gammaCorrectBegin(float& r, float& g, float& b) const
This function outputs the red (r), green (g), and blue (b) values stored in the SGXColourRGBA after converting them to linear colour space. Passing reference is used for multiple function outputs. The outputs will be numbers between 0 and 1 inclusive. This function is typically run at the start of gamma correction to get gamma corrected (linear colour space) values to compute with.
#f void $gammaCorrectEnd(float r, float g, float b)
This function sets the red (r), green (g), and blue (b) channels of the SGXColourRGBA using the numbers passed. The numbers passed are in linear colour space and between 0 and 1 inclusive. If numbers are out of range, they are bound to the valid range automatically. It is impossible for a SGXColourRGBA to store invalid colours. This function is typically run at the end of gamma correction to apply the new values from linear colour space.
#f void $linearTransformRedWithGamma(float m, float c)
This function replaces the current red value stored in the SGXColourRGBA, which we will refer to as x, with mx + c. The SGXColourRGBA is converted to linear colour space (gamma correction) first before the computation and converted back after, giving more realistic results. This edits the SGXColourRGBA in place. To get a copy of the old SGXColourRGBA, copy it to another variable first.
#f void $linearTransformGreenWithGamma(float m, float c)
This function replaces the current green value stored in the SGXColourRGBA, which we will refer to as x, with mx + c. The SGXColourRGBA is converted to linear colour space (gamma correction) first before the computation and converted back after, giving more realistic results. This edits the SGXColourRGBA in place. To get a copy of the old SGXColourRGBA, copy it to another variable first.
#f void $linearTransformBlueWithGamma(float m, float c)
This function replaces the current blue value stored in the SGXColourRGBA, which we will refer to as x, with mx + c. The SGXColourRGBA is converted to linear colour space (gamma correction) first before the computation and converted back after, giving more realistic results. This edits the SGXColourRGBA in place. To get a copy of the old SGXColourRGBA, copy it to another variable first.
#f void $applyTint(SGXColourRGBA x)
This function places colour x in front of a background using the colour represented by this SGXColourRGBA and computes the resulting colour that will be seen. Transparency of both colours are taken into account. The resulting colour is set to this SGXColourRGBA. This edits this SGXColourRGBA in place. To get a copy of the old SGXColourRGBA, copy it to another variable first. Gamma correction is used in the computation process for visual accuracy.
#f void $applyTintSeparateTransparency(SGXColourRGBA x, int a)
This function places colour x in front of a background using the colour represented by this SGXColourRGBA and computes the resulting colour that will be seen. The transparency of x is assumed to be a, a integer between 0 and 255. The resulting colour is set to this SGXColourRGBA. This edits this SGXColourRGBA in place. To get a copy of the old SGXColourRGBA, copy it to another variable first. This function does not correct out of range values of a and setting a to something out of range may produce interesting colours. Gamma correction is used in the computation process for visual accuracy.
#f void $applyTintSeparateTransparencyUsingFloat(SGXColourRGBA x, float a)
This function places colour x in front of a background using the colour represented by this SGXColourRGBA and computes the resulting colour that will be seen. The transparency of x is assumed to be a, a number between 0 and 1. The resulting colour is set to this SGXColourRGBA. This edits this SGXColourRGBA in place. To get a copy of the old SGXColourRGBA, copy it to another variable first. This function does not correct out of range values of a and setting a to something out of range may produce interesting colours. Gamma correction is used in the computation process for visual accuracy.
#f void $applyTintNoGammaCorrection(SGXColourRGBA x)
This function places colour x in front of a background using the colour represented by this SGXColourRGBA and computes the resulting colour that will be seen. Transparency of both colours are taken into account. The resulting colour is set to this SGXColourRGBA. This edits this SGXColourRGBA in place. To get a copy of the old SGXColourRGBA, copy it to another variable first.
#f void $applyTintNoGammaCorrectionSeparateTransparency(SGXColourRGBA x, int a)
This function places colour x in front of a background using the colour represented by this SGXColourRGBA and computes the resulting colour that will be seen. The transparency of x is assumed to be a, a integer between 0 and 255. The resulting colour is set to this SGXColourRGBA. This edits this SGXColourRGBA in place. To get a copy of the old SGXColourRGBA, copy it to another variable first. This function does not correct out of range values of a and setting a to something out of range may produce interesting colours.
#f void $applyTintNoGammaCorrectionSeparateTransparencyUsingFloat(SGXColourRGBA x, float a)
This function places colour x in front of a background using the colour represented by this SGXColourRGBA and computes the resulting colour that will be seen. The transparency of x is assumed to be a, a number between 0 and 1. The resulting colour is set to this SGXColourRGBA. This edits this SGXColourRGBA in place. To get a copy of the old SGXColourRGBA, copy it to another variable first. This function does not correct out of range values of a and setting a to something out of range may produce interesting colours.
#f [[nodiscard]] SGXColourRGBA $linearInterpolate(SGXColourRGBA x, float f) const
This function interpolates linearly between this SGXColourRGBA and the colour represented by x, visually equivalent to mixing the colours. This does not change transparency. f should be a number between 0 and 1 inclusive, and when mixing the colours, f portions of this colour is mixed with 1 - f portions of x. Using f = 0.5 gives the colour halfway between the 2 colours.
#f [[nodiscard]] SGXColourRGBA $linearInterpolateGammaCorrection(SGXColourRGBA x, float f) const
This function interpolates linearly between this SGXColourRGBA and the colour represented by x, visually equivalent to mixing the colours. This does not change transparency. f should be a number between 0 and 1 inclusive, and when mixing the colours, f portions of this colour is mixed with 1 - f portions of x. Using f = 0.5 gives the colour halfway between the 2 colours. Gamma correction is used in the computation process for visual accuracy.
#f void $toComplementColour()
This function changes this SGXColourRGBA to its complementary colour and sets that colour to this SGXColourRGBA. The transparency is not changed during this computation. This edits this SGXColourRGBA in place. To get a copy of the old SGXColourRGBA, copy it to another variable first.
